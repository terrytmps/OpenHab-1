val TAG_FileName = "chambre.rules"

// définition de fonctions
val isBedEmpty = [ | return lit.state == 0 ]

// itération sur les membres d'un groupe
// Zone.members.forEach[ motionSensor |
//    motionSensor.postUpdate(triggeringItem.state) ]

val LUMINOSITE_MIN = 40
val LUMINOSITE_MAX = 50
val LUMINOSITE_OPTIMALE = 35
val NIVEAU_SONORE_MIN = 30
val NIVEAU_SONORE_MAX = 90
val NIVEAU_SONORE__OPTIMAL = 75

val all_items = [ state |
    chambre.postUpdate(state)
    lit.postUpdate(state)
    porte.postUpdate(state)
    detecteur_mvt_plafond.postUpdate(state)
    ampoule_plafonnier.postUpdate(state)
    lampe_chevet.postUpdate(state)
    day_light.postUpdate(state)
    test_button.postUpdate(state)
    error_button.postUpdate(state)
]

val all_lights = [ state |
    ampoule_plafonnier.postUpdate(state)
    lampe_chevet.postUpdate(state)
] // applique au groupe de lumières

// si plusieurs règles sont déclenchées en même temps : l'ordre exécution non garanti (en parallèle)

rule "Démarrage de openHAB"
when
    System started
then
    logInfo(TAG_FileName, "Rule : Démarrage de openHAB")
    all_items.apply("OFF")
end

rule "reset simulation"
when
    // différence entre "received command" (utilisateur qui change) et "received update" (changement d'état en général)
    // Item simulation received command
    Item simulation received update
then
    // récupérer l'heure actuelle
    logInfo(TAG_FileName, "Règle déclenchée à : " + now.toString)
    all_items.apply(simulation.state)
end

rule "gestion lumiere chambre"
when
    Item chambre received update or
    Item day_light received update
then
    logInfo(TAG_FileName, "Rule : gestion lumiere chambre")

    if (day_light.state > LUMINOSITE_MIN && chambre.state == ON) {
        ampoule_plafonnier.postUpdate(OFF)
    } else {
        ampoule_plafonnier.postUpdate(chambre.state)
    }
end

rule "gestion de toutes les lumières"
when
    Item test_button received command
    // Member of Luminance received update (Luminance est un group d'items)
then
    logInfo(TAG_FileName, "Rule : gestion de toutes les lumières")
    Thread::sleep(1000) // Simuler une attente d'1 seconde pour une opération
    all_lights.apply(test_button.state) // applique au groupe de lumières
end

rule "detection inconsistence systeme"
when
    Item chambre received command or
    Item ampoule_plafonnier received command or
    Item day_light received command or
    Time cron "0 0 0 * * ?" // tous les jours à minuit
then
    logInfo(TAG_FileName, "Rule : detection inconsistence systeme")
    // comparer 2 à 2
    if (chambre.state == ON && ampoule_plafonnier.state == ON && day_light.state > 50) {
        error_button.postUpdate(ON)
    }else{
        error_button.postUpdate(OFF)
    }
end

rule "Différer la fermeture de l'éclairage"
when
    Item chambre received update OFF
then
    if (delayOffTimer !== null) {
        delayOffTimer.cancel() // Annuler le minuteur si existant
    }
    
    // Démarrer un minuteur de 5 minutes avant d'éteindre l'éclairage
    delayOffTimer = createTimer(now.plusSecond(5), [ |
        ampoule_plafonnier.sendCommand(OFF)
        logInfo("system.rules", "L'éclairage a été éteint après 5 minutes.")
    ])
end